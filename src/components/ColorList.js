import React from 'react';
import PropTypes from 'prop-types';
import { Flex, Box, Absolute, Relative, Border, Subhead, Text, Small, Label, Input, Checkbox } from 'rebass';
import ColorAdd from './ColorAdd';

class ColorList extends React.Component {
	constructor(props) {
		super();

		this.state = {
			autoGenerate: false
		}

		this.renderColors = this.renderColors.bind(this);
		this.renderColor = this.renderColor.bind(this);
		this.renderSpectrum = this.renderSpectrum.bind(this);
		this.renderSpectrumColor = this.renderSpectrumColor.bind(this);
		this.onToggleAutoGenerate = this.onToggleAutoGenerate.bind(this);
	}

	onToggleAutoGenerate(e) {
		this.setState({autoGenerate: !this.state.autoGenerate})
	}

	renderColors(colors) {
		return(
			<Flex py={3} wrap w={1}>
				{this.props.theme.paletteSorted.map(this.renderColor)}
				{this.props.editMode && 
					<ColorAdd addColor={this.props.addColor} theme={this.props.theme} />
				}
			</Flex>
		)
	}

	renderColor(key) {
		const colorName = key;
		const colorValue = this.props.theme.palette[key].main;
		const spectrum = this.props.theme.palette[key].spectrum;
	    return (
	    	<Box key={colorName} pr={2} pb={4}>
		    	<Border>
					<Box bg={colorName} style={{minWidth:'96px',minHeight:'80px'}} />
					{this.renderSpectrum(spectrum || Array(10).fill(colorValue))}
		    	</Border>
		    	{this.props.editMode && !this.state.autoGenerate ? (
					<Flex>
						<Box w={3/4}>
							<Input pattern="[A-Za-z\s]+" onBlur={this.props.renameColor} m={1} w={72} name='colorName' data-colorname={colorName} defaultValue={colorName} />
							<Input f={0} onBlur={this.props.updateColorValue} m={1} w={72} name='colorValue' data-colorname={colorName} data-colorvalue={colorValue} defaultValue={colorValue} />
				    	</Box>
				    	<Relative w={1/4}>
							<Absolute top right>
								<Text onClick={this.props.deleteColor} f='24px' data-color={colorName} color={this.props.theme.colors.red6 || 'indianred'} is='a' href='#' py={4} px={3} children='Ã—' style={{border:'none',marginRight:'-12px',marginTop:'-2px',textDecoration:'none'}} />
							</Absolute>
				    	</Relative>
		    		</Flex>
				) : (
    				<Box p={1}>
						<div><Small bold>{colorName}</Small></div>
						<div><Small>{colorValue}</Small></div>
		    		</Box>
				)}
	    	</Box>
	    )
	}

	renderSpectrum(spectrum) {
		return(
			<Flex wrap>
				{spectrum.map(this.renderSpectrumColor)}
			</Flex>
		)
	}

	renderSpectrumColor(colorValue, i) {
		return(
			<Box key={colorValue+i} p={['5px',2]} style={{backgroundColor:colorValue}} />
		)
	}

  	render() {
	  	return (
		    <div id="colors">
		    	<Subhead py={2} caps f={0} color={this.props.theme.colors.base}>Colors</Subhead>

		    	{this.props.editMode && 
	    			<Box pb={4}>
		    			<Box pb={3}>
		    				<Box pb={2}>
		    					<Label py={2} style={{cursor:'pointer'}}>
		    						<Checkbox onChange={this.onToggleAutoGenerate} name='autogenerateColors' defaultChecked={this.state.autoGenerate} />
		    						Generate Colors Automatically
		    						{this.state.autoGenerate ? (
					    				<Small bold color={this.props.theme.colors.green7 || 'green'} style={{position:'relative',top:'-2px'}} pl={2}>(On)</Small>
									) : (
										<Small bold color={this.props.theme.colors.gray7 || 'gray'} style={{position:'relative',top:'-2px'}} pl={2}>(Off)</Small>
									)}
		    					</Label>
							</Box>
							{this.state.autoGenerate ? (
			    				<Small>Colors are automatically generated by <a href="https://palx.jxnblk.com/">Palx</a> from a single base color to a full-spectrum color palette.</Small>
							) : (
								<Small>Edit, add or remove colors and apply color scale spectrum.</Small>
							)}
			    		</Box>
			    		{this.state.autoGenerate &&
		    				<Box w={120} pt={2}>
				    			<Label>Base Color</Label>
				    			<Input onChange={this.props.updateBaseColor} defaultValue={this.props.theme.colors.base} />
				    		</Box>
				    	}
		    		</Box>
		    	}

		    	{this.renderColors(this.props.theme.colors)}

		    </div>
		)
	}

	static propTypes = {
	    theme: PropTypes.object.isRequired,
	    updateBaseColor: PropTypes.func.isRequired,
	    updateColorValue: PropTypes.func.isRequired,
	    renameColor: PropTypes.func.isRequired,
	    deleteColor: PropTypes.func.isRequired,
	    addColor: PropTypes.func.isRequired,
		editMode: PropTypes.bool.isRequired,
	};
}

export default ColorList;
